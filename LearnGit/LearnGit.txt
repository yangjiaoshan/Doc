git init  
	初始化当前目录为git仓库。

git add  filename
	将文件添加到git仓库中，实际上add命令是将所提交的文件所有修改放在暂存区。如果此命令执行成功以后将没有任何显示。当你需要向仓库中提交一个修改过的文件，无论这个文件之前有没有执行过git add，每次提交都需要再次输入git add  filename 。

git  commit -m "start learn git"
	将本次操作提交到仓库中，git add 将修改存放在暂存区，而commit则将暂存区中的修改提交到相应的分支中。命令选项 -m 后面输入的是本次提交的说明，用户可以根据本次修改的目的自定义任意内容。命令执行成功以后会提示本次仓库有哪些变动。
	
git  status 
	查看当前仓库的状态
	
git  diff  filename
	查看filename文件具体被修改了什么内容。
	
git  log 
	可以查看所有之前提交过的版本以及相关描述信息。
	git  log --pretty=oneline 可以只显示版本号以及版本的描述，这样每次当你仅仅想寻找一个之前的版本的时候，这个命令的输出比较的简洁。
	
git reset --hard <参数>
	参数主要的就是版本号但是这里版本号有两种表现方式：
		1. 版本号的前几位字母，但是这前几个字母必须可以标示这个版本的唯一性。
		2. HEAD是当前版本的意思，当参数为HEAD^就是上一个版本HEAD^^就是上上一个版本，以此类推。
		
git  reflog  
	记录git仓库中每次版本变更的记录，这样可以在git log命令无法查看到一些版本的信息的时候，可以使用这个命令查看所有的历史记录，方便查找遗失版本的信息。
	
暂存区（stage）
	相当于购物车一样，在还不确定需不需要将所有文件全部提交的情况下，可以先放在暂存区。
	
git  checkout  --  filename
	把文件在工作区的修改全部撤销，将这个文件回到最近一次git commint或git add时的状态，如果文件只是在共走区中修改还没有执行add命令添加到暂存区中，则恢复到最近一个版本的状态；如果文件已经提交到暂存区中，则恢复到暂存区的状态。
	checkout命令使用小场景：
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


git remote add origin https://github.com/yangjiaoshan/Doc.git	
	将本地的一个仓库和远程的Doc仓库关联起来，origin是远程库的名字，Git的默认叫法，可以自定义。命令执行成功以后没有任何返回。
	
git  push -u origin master
	将本地库的内容推送到远程库中，使用git  push。本条明林的意思是把当前master分支推送到远程。命令选项 -u 表示将本地的分支master和远程分支master关联上。第一次推送的时候加上-u 以后推送可以不使用-u了。  第一次推送的时候还需要输入github上的用户名和密码。
	在这里说一下，git有两种关联或者是同步方式，ssh和https。不同的是ssh不需要输入密码速度快，https需要输入密码速度还慢。但是ssh需要在github中建立ssh秘钥。
	
	